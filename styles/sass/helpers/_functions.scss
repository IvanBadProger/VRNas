@use 'sass:math';

/// Преобразует пиксели в единицы rem.
/// 
/// Эта функция принимает значение в пикселях и преобразует его в rem, основываясь на стандартном размере шрифта в 16 пикселей.
/// 
/// @require @param {number} $pixel - значение в пикселях, которое необходимо преобразовать в rem, без единиц измерения (например, 32, а не 32px).
/// 
/// @return {string} - значение в rem, например, "2rem".
/// 
/// @example
/// $font-size: rem(32); // возвращает "2rem"
/// $margin: rem(16); // возвращает "1rem"
/// $padding: rem(8); // возвращает "0.5rem"
@function rem($pixel) {
  @if math.is-unitless($pixel) {
    @return math.div($pixel, 16)+rem;
  }

  @else {
    @error 'Не используйте единицы измерения при работе с функцией rem()! Передавайте аргументом только числа.';
  }
}

/// Генерирует значение размера, которое изменяется в зависимости от ширины вьюпорта.
/// 
/// Эта функция создает адаптивное значение, которое изменяется между минимальным и максимальным значениями
/// в зависимости от ширины вьюпорта.
/// 
/// @param {number} $max [100] - максимальное значение в пикселях.
/// @param {number} $min [10] - минимальное значение в пикселях.
/// 
/// @return {string} - значение CSS clamp, которое можно использовать для адаптивного размера.
/// Например, "clamp(0.625rem, calc(0.625rem + 1.25vw), 1.5rem)".
/// 
/// @example
/// .text {
///   font-size: fluid(24, 12); // возвращает "clamp(1.5rem, calc(1.5rem + 1.25vw), 1.5rem)"
/// }
@function fluid($max: 100, $min: 10) {
  $maxViewportWidth: 1600;
  $minViewportWidth: 390;

  $maxSize: math.div($max, 16);
  $minSize: math.div($min, 16);

  $maxWidth: math.div($maxViewportWidth, 16);
  $minWidth: math.div($minViewportWidth, 16);

  $slope: math.div(($maxSize - $minSize), ($maxWidth - $minWidth));
  $yAxisIntersection: -$minWidth * $slope + $minSize;

  @return clamp(#{$minSize * 1rem},
    #{$yAxisIntersection * 1rem} + #{$slope * 100vw},
    #{$maxSize * 1rem});
}